<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java集合篇</title>
    <link href="/posts/55d6653c.html"/>
    <url>/posts/55d6653c.html</url>
    
    <content type="html"><![CDATA[<p class="note note-info">Last updated on October 05, 2023</p><h2 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h2><h3 id="Java-集合概览"><a href="#Java-集合概览" class="headerlink" title="Java 集合概览"></a>Java 集合概览</h3><p>Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 <code>Collection</code>接口，主要用于存放单一元素；另一个是 <code>Map</code> 接口，主要用于存放键值对。对于<code>Collection</code> 接口，下面又有三个主要的子接口：<code>List</code>、<code>Set</code> 和 <code>Queue</code>。</p><p>Java 集合框架如下图所示：</p><p><img src="https://blog-1320152118.cos.ap-chengdu.myqcloud.com/Java-Collection/202310051433999.png"></p><h3 id="知道-List-Set-Queue-Map-四者的区别吗？"><a href="#知道-List-Set-Queue-Map-四者的区别吗？" class="headerlink" title="知道 List, Set, Queue, Map 四者的区别吗？"></a>知道 List, Set, Queue, Map 四者的区别吗？</h3><p><code>List</code>：存储的元素是有序的、可重复的。</p><p><code>Set</code>：存储的元素不可重复的。</p><p><code>Queue</code>：按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</p><p><code>Map</code>：使用键值对（key-value）存储；key 是无序的、不可重复的；value 是无序的、可重复的，每个键最多映射到一个值。</p><h3 id="集合框架底层数据结构总结"><a href="#集合框架底层数据结构总结" class="headerlink" title="集合框架底层数据结构总结"></a>集合框架底层数据结构总结</h3><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><code>ArrayList</code>：<code>Object[]</code> 数组</p><p><code>Vector</code>：<code>Object[]</code> 数组</p><p><code>LinkedList</code>：双向链表(JDK 1.6 之前为循环链表，JDK 1.7 取消了循环)</p><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>HashSet</code>(无序，唯一): 基于 <code>HashMap</code> 实现的，底层采用 <code>HashMap</code> 来保存元素</p><p><code>LinkedHashSet</code>: <code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code> 来实现的。有点类似于我们之前说的 <code>LinkedHashMap</code> 其内部是基于 <code>HashMap</code> 实现一样，不过还是有一点点区别的</p><p><code>TreeSet</code>(有序，唯一): 红黑树(自平衡的排序二叉树)</p><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p><code>PriorityQueue</code>: <code>Object[]</code> 数组来实现二叉堆</p><p><code>ArrayQueue</code>: <code>Object[]</code> 数组 + 双指针</p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>HashMap</code>：</p><p>JDK 1.8 之前由数组+链表组成，数组是 <code>HashMap</code> 的主体，链表则是主要为了解决哈希冲突而存在的（”拉链法”解决冲突）。</p><blockquote><p>拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p></blockquote><p><img src="https://blog-1320152118.cos.ap-chengdu.myqcloud.com/Java-Collection/202310052110150.png"></p><p>JDK 1.8 以后由数组+链表+红黑树组成，在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）并且数组长度大于 64（如果当前数组的长度小于 64，那么会选择先进行数组扩容）时，将链表转化为红黑树，以减少搜索时间。扩容 resize( ) 时，红黑树拆分成的树的结点数小于等于临界值6个，则退化成链表</p><p><img src="https://blog-1320152118.cos.ap-chengdu.myqcloud.com/Java-Collection/202310052111698.png"></p><p><code>LinkedHashMap</code>：<code>LinkedHashMap</code> 继承自 <code>HashMap</code>，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，<code>LinkedHashMap</code> 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑</p><p><code>Hashtable</code>：数组+链表组成的，数组是 <code>Hashtable</code> 的主体，链表则是主要为了解决哈希冲突而存在的</p><p><code>TreeMap</code>：红黑树（自平衡的排序二叉树）</p><h2 id="List-1"><a href="#List-1" class="headerlink" title="List"></a>List</h2><h3 id="说说ArrayList-和-Array（数组）的区别？"><a href="#说说ArrayList-和-Array（数组）的区别？" class="headerlink" title="说说ArrayList 和 Array（数组）的区别？"></a>说说ArrayList 和 Array（数组）的区别？</h3><p><code>ArrayList</code> 内部基于动态数组实现，比 <code>Array</code>（静态数组） 使用起来更加灵活。</p><p><code>ArrayList</code>会根据实际存储的元素动态地扩容或缩容，而 <code>Array</code> 被创建之后就不能改变它的长度了。</p><p><code>ArrayList</code> 允许你使用泛型来确保类型安全，<code>Array</code> 则不可以。</p><p><code>ArrayList</code> 中只能存储对象。对于基本类型数据，需要使用其对应的包装类（如 Integer、Double 等）。<code>Array</code> 可以直接存储基本类型数据，也可以存储对象。</p><p><code>ArrayList</code> 支持插入、删除、遍历等常见操作，并且提供了丰富的 API 操作方法，比如 <code>add()</code>、<code>remove()</code>等。<code>Array</code> 只是一个固定长度的数组，只能按照下标访问其中的元素，不具备动态添加、删除元素的能力。</p><p><code>ArrayList</code>创建时不需要指定大小，而<code>Array</code>创建时必须指定大小。</p><h3 id="知道ArrayList-插入和删除元素的时间复杂度吗？"><a href="#知道ArrayList-插入和删除元素的时间复杂度吗？" class="headerlink" title="知道ArrayList 插入和删除元素的时间复杂度吗？"></a>知道ArrayList 插入和删除元素的时间复杂度吗？</h3><p><strong>插入</strong>：</p><ul><li>头部插入：由于需要将所有元素都依次向后移动一个位置，因此时间复杂度是 <code>O(n)</code>。</li><li>尾部插入：当 <code>ArrayList</code> 的容量未达到极限时，往列表末尾插入元素的时间复杂度是 <code>O(1)</code>，因为它只需要在数组末尾添加一个元素即可；当容量已达到极限并且需要扩容时，则需要执行一次 <code>O(n)</code> 的操作将原数组复制到新的更大的数组中，然后再执行 <code>O(1)</code> 的操作添加元素。</li><li>指定位置插入：需要将目标位置之后的所有元素都向后移动一个位置，然后再把新元素放入指定位置。这个过程需要移动平均 n&#x2F;2 个元素，因此时间复杂度为 <code>O(n)</code>。</li></ul><p><strong>删除</strong>：</p><ul><li>头部删除：由于需要将所有元素依次向前移动一个位置，因此时间复杂度是 <code>O(n)</code>。</li><li>尾部删除：当删除的元素位于列表末尾时，时间复杂度为 <code>O(1)</code>。</li><li>指定位置删除：需要将目标元素之后的所有元素向前移动一个位置以填补被删除的空白位置，因此需要移动平均 n&#x2F;2 个元素，时间复杂度为 <code>O(n)</code>。</li></ul><blockquote><p><strong>LinkedList 插入和删除元素的时间复杂度？</strong></p><p>1.头部插入&#x2F;删除：只需要修改头结点的指针即可完成插入&#x2F;删除操作，因此时间复杂度为 <code>O(1)</code>。</p><p>2.尾部插入&#x2F;删除：只需要修改尾结点的指针即可完成插入&#x2F;删除操作，因此时间复杂度为 <code>O(1)</code>。</p><p>3.指定位置插入&#x2F;删除：需要先移动到指定位置，再修改指定节点的指针完成插入&#x2F;删除，因此需要移动平均 n&#x2F;2 个元素，时间复杂度为 <code>O(n)</code>。</p></blockquote><h3 id="知道-ArrayList-的扩容机制吗？"><a href="#知道-ArrayList-的扩容机制吗？" class="headerlink" title="知道 ArrayList 的扩容机制吗？"></a>知道 ArrayList 的扩容机制吗？</h3><p>添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，也就是旧容量的 1.5 倍。</p><p>扩容操作需要调用 <code>Arrays.copyOf()</code> 把原数组整个复制到新数组中，这个操作代价很高，所以最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// JDK 1.8</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断数组是否越界</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);<br>    &#125;<br>    ensureExplicitCapacity(minCapacity);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureExplicitCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    modCount++;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">if</span> (minCapacity - elementData.length &gt; <span class="hljs-number">0</span>)<br>        grow(minCapacity);<br>&#125;<br><br><span class="hljs-comment">// 扩容</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-comment">// oldCapacity为旧容量，newCapacity为新容量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> elementData.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// 1.5倍</span><br>    <br>    <span class="hljs-comment">// 检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <br>    <span class="hljs-comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行)hugeCapacity()方法来比较 minCapacity 和 MAX_ARRAY_SIZE</span><br>    <span class="hljs-comment">// 如果minCapacity大于最大容量，则新容量则为Integer.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE 即为Integer.MAX_VALUE - 8</span><br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hugeCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (minCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>    <span class="hljs-keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java集合</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础篇</title>
    <link href="/posts/4c564f26.html"/>
    <url>/posts/4c564f26.html</url>
    
    <content type="html"><![CDATA[<p class="note note-info">Last updated on October 01, 2023</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="Java-中的几种基本数据类型了解吗？"><a href="#Java-中的几种基本数据类型了解吗？" class="headerlink" title="Java 中的几种基本数据类型了解吗？"></a>Java 中的几种基本数据类型了解吗？</h3><p>Java 中有 8 种基本数据类型，分别为：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>char</code>、<code>blooean</code>。</p><p>这 8 种基本数据类型的默认值以及所占空间的大小如下：</p><p><img src="https://blog-1320152118.cos.ap-chengdu.myqcloud.com/Java-Basics/202310011802831.png"></p><p>可以看到，像 <code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>能表示的最大正数都减 1 了，这是因为在二进制补码表示法中，最高位是用来表示符号的（0 表示正数，1 表示负数），其余位表示数值部分。所以，如果我们要表示最大的正数，我们需要把除了最高位之外的所有位都设为 1。如果我们再加 1，就会导致溢出，变成一个负数。对于 <code>boolean</code>，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p><h3 id="基本类型和包装类型的区别？"><a href="#基本类型和包装类型的区别？" class="headerlink" title="基本类型和包装类型的区别？"></a>基本类型和包装类型的区别？</h3><p>Java 的每个基本类型都对应了一个包装类型，即：<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code> 。</p><p><strong>区别：</strong></p><p>1.包装类型可以为 <code>null</code>，而基本类型不可以 。</p><p>2.包装类型可用于泛型，而基本类型不可以 。</p><p>3.基本类型比包装类型更高效（基本类型在栈中直接存储的具体数值，而包装类型则存储的是堆中的引用）。</p><p>4.相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。</p><p>5.对于基本数据类型来说，<code>==</code> 比较的是值。对于包装数据类型来说，<code>==</code> 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 <code>equals()</code> 方法。</p><h3 id="自动装箱与拆箱了解吗？"><a href="#自动装箱与拆箱了解吗？" class="headerlink" title="自动装箱与拆箱了解吗？"></a>自动装箱与拆箱了解吗？</h3><p>有了基本类型和包装类型，肯定有些时候要在它们之间进行转换。</p><p><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</p><p><strong>拆箱</strong>：将包装类型转换为基本数据类型；</p><p>在 JDK 1.5之前，需要开发人员手动进行装拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//手动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> i.intValue(); <span class="hljs-comment">//手动拆箱</span><br></code></pre></td></tr></table></figure><p>在 JDK 1.5之后，为了简化开发人员的工作 Java 提供了自动装拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> i;   <span class="hljs-comment">//自动拆箱</span><br><br>=&gt;<br>    <br><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">10</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> i.intValue();<br></code></pre></td></tr></table></figure><p>也就是说，自动装箱是调用包装类的<code>valueOf()</code>方法完成的；自动拆箱是调用 <code>xxxValue()</code> 方法完成的。</p><p><strong>注意：</strong>应该尽量避免不必要的装拆箱操作，因为频繁装拆箱会严重影响系统的性能。</p><h3 id="包装类型的缓存机制了解吗？"><a href="#包装类型的缓存机制了解吗？" class="headerlink" title="包装类型的缓存机制了解吗？"></a>包装类型的缓存机制了解吗？</h3><p>Java 基本数据类型的包装类型（除了Float和Double）都用到了缓存机制来提升性能。<code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，<code>Character</code> 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，<code>Boolean</code> 直接返回<code>true</code>或<code>false</code>。如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//下面的代码的输出结果是 true 还是 false？</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>);<br>System.out.println(i==j);<br></code></pre></td></tr></table></figure><p><code>Integer i = 10</code>这一行代码会发生装箱，也就是说这行代码等价于 <code>Integer i = Integer.valueOf(10)</code> 。因此，<code>i</code> 直接使用的是缓存中的对象。而<code>Integer j = new Integer(10)</code> 会直接创建新的对象。所以答案是<code>false</code>。</p><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><h3 id="Final关键字有什么作用？"><a href="#Final关键字有什么作用？" class="headerlink" title="Final关键字有什么作用？"></a>Final关键字有什么作用？</h3><p>1.被final修饰的类不可以被继承 。</p><p>2.被final修饰的方法不可以被重写 。</p><p>3.被final修饰的变量不可以被改变。</p><p>4.被final修饰不可变的是变量的引用，而不是引用指向的内容， 引用指向的内容是可以改变的。</p><h3 id="什么是重载（Overload）和重写（Override）"><a href="#什么是重载（Overload）和重写（Override）" class="headerlink" title="什么是重载（Overload）和重写（Override）?"></a>什么是重载（Overload）和重写（Override）?</h3><p><strong>重载：</strong>发生在同一个类中，方法名相同参数列表不同（参数类型不同、个数不同、顺序不同），与方法返回值和访问修饰符无关，即重载的方法不能根据返回类型进行区分 。</p><p><strong>重写：</strong>发生在父子类中，方法名、参数列表必须相同，子类方法返回值小于等于父类，抛出的异常范围小于等于父类，访问修饰符大于等于父类（里氏代换原则）；如果父类方法访问修饰符为 <code>private/final/static</code> 则子类就不能重写该方法，但是被 <code>static</code> 修饰的方法能够被再次声明；构造方法无法被重写。</p><p><img src="https://blog-1320152118.cos.ap-chengdu.myqcloud.com/Java-Basics/202310012252672.png"></p><h3 id="知道-和-equals-的区别吗？"><a href="#知道-和-equals-的区别吗？" class="headerlink" title="知道&#x3D;&#x3D; 和 equals() 的区别吗？"></a>知道&#x3D;&#x3D; 和 equals() 的区别吗？</h3><p><code>==</code>  的作用是判断两个对象的地址是不是相等，即判断两个对象是不是同一个对象。(对于基本数据类型 <code>==</code> 比较的是值，对于引用数据类型 <code>==</code> 比较的是对象的内存地址)。</p><blockquote><p>因为 Java 只有值传递，所以对于 &#x3D;&#x3D; 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。</p></blockquote><p><code>equals()</code> 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类，因此所有的类都有<code>equals()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Object类中的equals()方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>     <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>equals()</code> 方法存在两种使用情况：</p><p>1.类没有重写 <code>equals()</code>方法：通过<code>equals()</code>比较该类的两个对象时，等价于通过<code>==</code>比较这两个对象，使用的默认是<code>Object</code>类中的<code>equals()</code>方法。</p><p>2.类重写了 <code>equals()</code>方法：一般我们都重写 <code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 <code>true</code>(即认为这两个对象相等)。</p><h3 id="hashCode三连问"><a href="#hashCode三连问" class="headerlink" title="hashCode三连问"></a>hashCode三连问</h3><h4 id="hashCode-有什么用？"><a href="#hashCode-有什么用？" class="headerlink" title="hashCode()有什么用？"></a>hashCode()有什么用？</h4><p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code> 整数），也称为散列码。哈希码的作用是确定该对象在哈希表中的索引位置。散列表存储的是键值对(key-value)，它的特点是：<strong>能根据”键”快速的检索出对应的”值”，这其中就利用到了散列码（可以快速找到所需要的对象）。</strong></p><h4 id="为什么要有-hashCode？"><a href="#为什么要有-hashCode？" class="headerlink" title="为什么要有 hashCode？"></a>为什么要有 hashCode？</h4><p>如果两个对象的<code>hashCode</code> 值不相等，我们就可以直接认为这两个对象不相等。</p><p>如果两个对象的<code>hashCode</code> 值相等，那这两个对象也不一定相等（哈希碰撞）。</p><blockquote><p><strong>哈希碰撞：</strong><code>hashCode()</code> 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓哈希碰撞也就是指的是不同的对象得到相同的 <code>hashCode</code> )。</p></blockquote><p>如果两个对象的<code>hashCode</code> 值相等并且<code>equals()</code>方法也返回 <code>true</code>，我们才认为这两个对象相等。</p><h4 id="为什么重写-equals-时必须重写-hashCode-方法？"><a href="#为什么重写-equals-时必须重写-hashCode-方法？" class="headerlink" title="为什么重写 equals() 时必须重写 hashCode() 方法？"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h4><p>因为两个相等的对象的 <code>hashCode</code> 值必须是相等。也就是说如果 <code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等。如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话就可能会导致 <code>equals</code> 方法判断是相等的两个对象，<code>hashCode</code> 值却不相等。</p><h3 id="String、StringBuffer、StringBuilder-的区别？"><a href="#String、StringBuffer、StringBuilder-的区别？" class="headerlink" title="String、StringBuffer、StringBuilder 的区别？"></a>String、StringBuffer、StringBuilder 的区别？</h3><p><strong>可变性：</strong><code>String</code>类中使用字符数组保存字符串，所以<code>string</code>对象是不可变的。<code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串，不过没有使用 <code>final</code> 和 <code>private</code> 关键字修饰，最关键的是这个 <code>AbstractStringBuilder</code> 类还提供了很多修改字符串的方法比如 <code>append</code> 方法。</p><blockquote><p><strong>String 为什么是不可变的?</strong></p><p>1.保存字符串的数组被 <code>final</code> 修饰且为私有的，并且<code>String</code> 类没有提供&#x2F;暴露修改这个字符串的方法。</p><p>2.<code>String</code> 类被 <code>final</code> 修饰导致其不能被继承，进而避免了子类破坏 <code>String</code> 不可变。</p></blockquote><p><strong>线程安全性：</strong><code>String</code> 中的对象是不可变的，也就可以理解为常量，线程安全。<code>AbstractStringBuilder</code> 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。<code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>性能：</strong>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><blockquote><p><strong>总结：</strong></p><p>1.操作少量的数据: 适用 <code>String</code></p><p>2.单线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuilder</code></p><p>3.多线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuffer</code></p></blockquote><h3 id="知道泛型吗？有什么作用？"><a href="#知道泛型吗？有什么作用？" class="headerlink" title="知道泛型吗？有什么作用？"></a>知道泛型吗？有什么作用？</h3><p><strong>泛型（Generics）</strong> 是 JDK 5 引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。</p><p>编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。比如 <code>ArrayList&lt;Person&gt; list = new ArrayList&lt;Person&gt;()</code> 这行代码就指明了该 <code>ArrayList</code> 对象只能传入 <code>Person</code> 对象，如果传入其他类型的对象就会报错。并且，原生 <code>List</code> 返回类型是 <code>Object</code> ，需要手动转换类型才能使用，使用泛型后编译器自动转换。</p><h3 id="知道注解吗？注解的解析方法有哪几种？"><a href="#知道注解吗？注解的解析方法有哪几种？" class="headerlink" title="知道注解吗？注解的解析方法有哪几种？"></a>知道注解吗？注解的解析方法有哪几种？</h3><p><strong>注解（Annotation）</strong>是 JDK 5 引入的新特性，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。JDK 提供了很多内置的注解（比如 <code>@Override</code>、<code>@Deprecated</code>），同时我们还可以自定义注解。</p><p>注解本质是一个继承了<code>Annotation</code> 的特殊接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Override</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注解只有被解析之后才会生效，常见的<strong>解析方法</strong>有两种：</p><p><strong>1.编译期直接扫描</strong>：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用<code>@Override</code> 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。</p><p><strong>2.运行期通过反射处理</strong>：像框架中自带的注解(比如 Spring 框架的 <code>@Value</code>、<code>@Component</code>)都是通过反射来进行处理的。</p><h3 id="知道反射吗？有什么优缺点？"><a href="#知道反射吗？有什么优缺点？" class="headerlink" title="知道反射吗？有什么优缺点？"></a>知道反射吗？有什么优缺点？</h3><p><strong>反射（Reflection）</strong>是指在运行状态中，对于任意一个类都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取信息以及动态调用对象的方法的功能称为 Java 语言的反射。</p><p><strong>优点：</strong>可以在运行期进行类型的判断，动态加载类，提高代码灵活度，为各种框架提供开箱即用的功能提供了便利。</p><p><strong>缺点：</strong>增加了安全问题（比如可以无视泛型参数的安全检查），性能瓶颈。</p><blockquote><p>反射的应用场景</p><p>1.在我们的项目中经常会使用反射 + 自定义注解的方式去实现一些功能，比如：在前后端交互的时候, 后端 Long 类型返回前端后会产生精度丢失 , 我们的处理方式就是在服务端, 通过配置修改 Jackson 的序列化规则, 将一些 Long 类型字段转化为字符串返回给前端, 这个时候我们自定义了一个@IdEncrpt注解 , 通过反射获取类的属性, 判断属性上是否添加了@IdEncrpt注解, 如果添加了 , 就会通过反射获取属性值, 转化为字符串。</p><p>2.像 Spring&#x2F;Spring Boot、MyBatis 等等框架中都大量使用了反射机制（这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射）。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
